name: Deployment

on:
  release: # When release created and published
    types: [ published ]
  workflow_dispatch:

env:
  AR_LOCATION: eu
  REGION: europe-southwest1 # Madrid

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:14-alpine
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres

      redis:
        image: redis:alpine
        ports: ['6379:6379']

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_URL: redis://localhost:6379/0
      RAILS_ENV: test
      DISABLE_SPRING: true
      CI: true

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v3.4.1
        with:
          cache: yarn

      - name: Install Yarn packages
        run: bin/yarn install --frozen-lockfile

      - name: Lint with RuboCop
        run: bin/rubocop --parallel

      - name: Run ESLint
        run: bin/yarn lint

      - name: Setup PostgreSQL
        run: bin/rails db:create

      - name: Compile assets
        run: bin/rails assets:precompile

      - name: Run Ruby Tests
        run: bin/rspec

      - name: End-to-end tests
        uses: cypress-io/github-action@v4
        with:
          start: bundle exec rails server
          wait-on: http://localhost:3000
          browser: chrome
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_BASE_URL: http://localhost:3000
          CYPRESS: true
        if: env.CYPRESS_RECORD_KEY != null

      - name: Check JS size limit
        run: yarn size-limit

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Cypress screenshots and videos
          path: |
            tmp/cypress_screenshots/
            tmp/cypress_videos/
          if-no-files-found: ignore


  build_image:

    needs: test

    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    environment: deployment

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.CP_CREDENTIALS }}'

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
      
      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build the image
        run: |
          export COMMIT_TIME=$(git show -s --format=%cI ${GITHUB_SHA})
          export COMMIT_VERSION=$(git describe --always)
          echo $GITHUB_SHA
          echo $COMMIT_TIME
          echo $COMMIT_VERSION
          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_VERSION -t app .

      - name: Push the image tagged with version to the container registry
        run: |
          docker tag app ${{ env.AR_LOCATION }}.gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.AR_LOCATION }}.gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
  
  deploy_cloud_run:

    needs: build_image

    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    environment: deployment

    steps:
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          service: ${{ secrets.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.AR_LOCATION }}.gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          flags: '--port=3000 --memory=256Mi --max-instances=1 --allow-unauthenticated'
          env_vars: 'APP_HOST=prueba-cloud-run-talncj5gdq-no.a.run.app'
          secrets: |
            DB_HOST=${{ secrets.SERVICE_NAME }}-dbhost:latest
            DB_USERNAME=${{ secrets.SERVICE_NAME }}-dbusername:latest
            DB_PASSWORD=${{ secrets.SERVICE_NAME }}-dbpassword:latest
            SECRET_KEY_BASE=${{ secrets.SERVICE_NAME }}-secret-key:latest
              
      - name: 'Use output'
        run: 'curl "${{ steps.deploy.outputs.url }}"'
